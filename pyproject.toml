[tool.poetry]
name = "anti-cf"
version = "1.0.0"
description = "Anti-CloudFlare package"
authors = ["Steven Van Ingelgem <steven@vaningelgem.be>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
#SQLAlchemy = "^2.0.36"
#mysql-connector-python = "^9.1.0"
#feedparser = "^6.0.11"
logprise = "*"
#bs4 = "^0.0.2"
#0html = "^0.0.0"
#dateparser = "^1.2.0"
fake-useragent = "^2.2.0"
#lxml = "^5.3.0"
#requests-cache = "^1.2.1"
#feedgenerator = "^2.1.0"
#curl-cffi = "^0.7.3"
#playwright = "^1.48"
#flask = "^3.1.0"
#pydantic = "^2.10.2"
requests = "*"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
ruff = "*"
#xmldiff = "^2.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"




[tool.pytest.ini_options]
testpaths = [
    "tests",
]
python_files = ['*_tests.py', '*_test.py']
pythonpath = [
    "."
]
requests_mock_case_sensitive = true

[tool.ruff]
line-length = 160
fix = true
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "ARG", # flake8-unused-arguments
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # Pyflakes
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # flake8-docstrings
    "I", # isort
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "PT", # flake8-pytest-style
    "RUF", # Ruff-specific rules
    "PTH", # flake8-use-pathlib
    "FA", # flake8-future-annotations
    "PIE", # flake8-pie
#    "TC", # flake8-type-checking
    "TD", # flake8-todos
    "TRY", # tryceratops
    "FBT001", # flake8-boolean-trap
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ANN", # flake8-annotations
]

ignore = [
    # Line length regulated by black
    "E501",
    # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
    # numpy convention with a few additional lints
    "D107",
    "D203",
    "D212",
    "D401",
    "D402",
    "D415",
    "D416",
    # flake8-pytest-style:
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # flake8-simplify
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM108", # Use ternary operator
    # ruff
    "RUF005", # unpack-instead-of-concatenating-to-collection-literal
    # pycodestyle
    # TODO: Remove errors below to further improve docstring linting
    # Ordered from most common to least common errors.
    "D105", # Missing docstring in magic method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    # flake8-todos
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class
    # Lints below are turned off because of conflicts with the ruff formatter
    "D206",
    "W191",

    "TID252",  # Relative imports are banned
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function

    "TRY300",  # Consider moving this statement to an `else` block
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 160

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D103", "B018", "FBT001"]
